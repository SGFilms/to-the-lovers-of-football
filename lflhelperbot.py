import telebot
import config
import lflparser
import smtplib
import re
from datetime import datetime
from unidecode import unidecode
from telebot import types

bot = telebot.TeleBot(config.TOKEN)

user_states = {}

@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä")
    item2 = types.KeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
    item3 = types.KeyboardButton("üìÆ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    markup.add(item1, item2, item3)

    bot.send_message(
        message.chat.id,
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
        "üöÄ <b>–ó–∞–ø—É—Å–∫–∞–µ–º—Å—è! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Å–µ–≥–æ –∑–∞ 1 —Ä—É–±–ª—å –¥–æ 15 —Å–µ–Ω—Ç—è–±—Ä—è 2025!</b>\n"
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ –õ—é–±–∏—Ç–µ–ª—å—Å–∫–æ–π –§—É—Ç–±–æ–ª—å–Ω–æ–π –õ–∏–≥–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –º–µ–Ω—é.",
        parse_mode='html',
        reply_markup=markup
    )

@bot.message_handler(commands=['help'])
def help_handler(message):
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä\n- –ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞\n- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–Ω–µ.')

@bot.message_handler(content_types=['text'])
def commands_handler(message):
    if message.chat.type == 'private':
        if message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä' or message.text == '/schedule':
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫, –∫–∞–∫ –æ–Ω–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ –õ–§–õ (–µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞).')
            user_states[message.chat.id] = 'waiting_for_team'

        elif message.text == 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞' or message.text == '/subscription':
            subscription_markup = types.InlineKeyboardMarkup(row_width=1)
            buy_subscription = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='buy_subscription')
            subscription_markup.add(buy_subscription)
            bot.send_message(message.chat.id, '<b>–£—Å–ø–µ–π—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ–≥–æ –∑–∞ 1 —Ä—É–±–ª—å!</b>\n\n<b>–ß—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ?</b>\n31 –∞–≤–≥—É—Å—Ç–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç –≥–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 899 —Ä—É–±. –∏–ª–∏ 100 —Ä—É–±. –≤ –º–µ—Å—è—Ü.\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å! ‚öΩ', parse_mode='html', reply_markup=subscription_markup)

        elif message.text == 'üìÆ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' or message.text == '/feedback':
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, –∏–¥–µ—é –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –ú—ã —á–∏—Ç–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            user_states[message.chat.id] = 'waiting_for_feedback'

        elif user_states.get(message.chat.id) == 'waiting_for_team':
            team = message.text
            bot.send_message(message.chat.id, f'–ù–∞–π–¥–µ–Ω–æ {len(lflparser.get_team_code(team))} –∫–æ–º–∞–Ω–¥. –ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...', parse_mode='html')
            schedules = lflparser.get_schedule(team)[1]
            teams_found = lflparser.get_schedule(team)[0]
            for i in range(len(teams_found)):
                if schedules[i] == '–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.':
                    bot.send_message(message.chat.id, f'<b>{teams_found[i]}</b>\n\n–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.', parse_mode='html')

                elif schedules[i] != '–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.' and len(schedules[i]) == 1:
                    bot.send_message(message.chat.id, f'<b>{teams_found[i]}</b>\n\n–î–∞—Ç–∞: {datetime.strptime(schedules[i][0]['match_date_time'], "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y, %H:%M")}\n–°—Ç–∞–¥–∏–æ–Ω: {schedules[i][0]['stadium_name']}\n–ê–¥—Ä–µ—Å: {schedules[i][0]['stadium_address']}\n<b>{schedules[i][0]['home_club_name']} VS {schedules[i][0]['away_club_name']}</b>', parse_mode='html')

                elif schedules[i] != '–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.' and len(schedules[i]) == 2:
                    bot.send_message(message.chat.id, f'<b>{teams_found[i]}</b>\n\n–î–∞—Ç–∞: {datetime.strptime(schedules[i][0]['match_date_time'], "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y, %H:%M")}\n–°—Ç–∞–¥–∏–æ–Ω: {schedules[i][0]['stadium_name']}\n–ê–¥—Ä–µ—Å: {schedules[i][0]['stadium_address']}\n<b>{schedules[i][0]['home_club_name']} VS {schedules[i][0]['away_club_name']}</b>\n\n–î–∞—Ç–∞: {datetime.strptime(schedules[i][1]['match_date_time'], "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y, %H:%M")}\n–°—Ç–∞–¥–∏–æ–Ω: {schedules[i][1]['stadium_name']}\n–ê–¥—Ä–µ—Å: {schedules[i][1]['stadium_address']}\n<b>{schedules[i][1]['home_club_name']} VS {schedules[i][1]['away_club_name']}</b>', parse_mode='html')

            del user_states[message.chat.id]

        elif user_states.get(message.chat.id) == 'waiting_for_feedback':
            feedback = message.text
            username = message.from_user.username

            def transliterate(feedback, username):
                username_result = username
                feedback_result = feedback
                if re.search(r'[^\x00-\x7F]', feedback):
                    feedback_result = unidecode(feedback)
                if re.search(r'[^\x00-\x7F]', username):
                    username_result = unidecode(username)
                return username_result, feedback_result

            smtp_obj = smtplib.SMTP('smtp.mail.ru', 587)
            smtp_obj.starttls()
            smtp_obj.login('stas.golovanov.07@mail.ru','M1qvmiFTuBM7n1Yr3dJg')
            smtp_obj.sendmail("stas.golovanov.07@mail.ru","tothefootballers@gmail.com",f"From user:\n{transliterate(feedback, username)[0]}\n\nMessage:\n{transliterate(feedback, username)[1]}")
            smtp_obj.quit()

            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏ üòä')

            del user_states[message.chat.id]
            del username, feedback

        else:
            if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
                bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!', parse_mode='html')
            elif message.text.lower() == '–ø–æ–∫–∞':
                bot.send_message(message.chat.id, f'–ü–æ–∫–∞, {message.from_user.first_name}!', parse_mode='html')
            elif message.text.lower() == '–∫–∞–∫ –¥–µ–ª–∞?':
                bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ!', parse_mode='html')
            else:
                bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏—Ç–µ /help.')

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'buy_subscription':
                bot.send_message(call.message.chat.id, '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')

    except Exception as e:
        print(repr(e))

bot.polling(non_stop=True)