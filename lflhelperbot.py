import telebot
import config
import lflparser
import smtplib
import re
import sqlite3
import uuid
import time
import random
from datetime import datetime
from unidecode import unidecode
from telebot import types
from yookassa import Configuration, Payment

bot = telebot.TeleBot(config.TOKEN)

Configuration.account_id = config.SHOP_ID
Configuration.secret_key = config.YK_API_KEY

user_states = {}

def get_user_column(username, column_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Users.

    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Telegram username)
    :param column_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ Users
    :return: –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    """
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(f"SELECT {column_name} FROM Users WHERE username = ?", (username,))
        result = cursor.fetchone()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å—Ç–æ–ª–±–µ—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
        if result and result[0] is not None:
            return result[0]
        else:
            return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ NULL

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ '{column_name}': {e}")
        return None

    finally:
        conn.close()

def ensure_last_payment_id_column():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ 'last_payment_id' –≤ —Ç–∞–±–ª–∏—Ü–µ 'Users'.
    –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ —Å —Ç–∏–ø–æ–º TEXT –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é NULL.
    """
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    try:
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–∞
        cursor.execute("PRAGMA table_info(Users)")
        columns = [col[1] for col in cursor.fetchall()]

        if 'last_payment_id' not in columns:
            print("–°—Ç–æ–ª–±–µ—Ü 'last_payment_id' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...")

            # –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
            cursor.execute("ALTER TABLE Users ADD COLUMN last_payment_id TEXT DEFAULT NULL")
            conn.commit()
            print("–°—Ç–æ–ª–±–µ—Ü 'last_payment_id' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            print("–°—Ç–æ–ª–±–µ—Ü 'last_payment_id' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

def wait_for_payment_success(username, max_retries=100, initial_delay=1, max_delay=60):
    """
    Polls for payment success with exponential backoff.

    Args:
        username (str): The username to query.
        max_retries (int): Maximum number of retry attempts.
        initial_delay (int): Initial delay in seconds.
        max_delay (int): Maximum delay allowed in seconds.

    Returns:
        bool: True if payment succeeded, False if max retries reached.
    """
    retry_count = 0
    delay = initial_delay

    while retry_count < max_retries:
        try:
            payment = Payment.find_one(get_user_column(username, 'last_payment_id'))
            if payment.status == 'succeeded':
                return True
        except Exception as e:
            print(f"Error checking payment status for {username}: {e}")

        # Add jitter to avoid synchronized retries
        jitter = random.uniform(0, delay / 2)
        sleep_time = delay + jitter
        print(f"Retrying in {sleep_time:.2f} seconds...")
        time.sleep(sleep_time)

        # Exponentially increase delay, capped at max_delay
        delay = min(delay * 2, max_delay)
        retry_count += 1

    print(f"Max retries reached for {username}. Payment status not confirmed.")
    return False

def is_subscription_active(username):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ—ë, –µ—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫.

    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Telegram username)
    :return: True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –∏–Ω–∞—á–µ False
    """
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    cursor.execute("SELECT subscription_active, subscription_duration FROM Users WHERE username = ?", (username,))
    result = cursor.fetchone()
    connection.close()

    if result is None:
        return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    active, duration_str = result

    if active != 1:
        return False  # –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

    if not duration_str:
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        cursor.execute("UPDATE Users SET subscription_active = 0 WHERE username = ?", (username,))
        connection.commit()
        connection.close()
        return False  # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞

    try:
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
        duration_dt = datetime.strptime(duration_str, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        return False  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

    current_dt = datetime.now()

    if current_dt >= duration_dt:
        # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        cursor.execute("UPDATE Users SET subscription_active = 0 WHERE username = ?", (username,))
        connection.commit()
        connection.close()
        return False
    else:
        return True  # –ü–æ–¥–ø–∏—Å–∫–∞ –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞

@bot.message_handler(commands=['start'])
def welcome(message):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Users (
    username TEXT NOT NULL,
    subscription_active INTEGER,
    subscription_start_datetime TIMESTAMP,
    subscription_duration TEXT NOT NULL
    )
    ''')

    if message.from_user.username:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
        cursor.execute('SELECT * FROM Users WHERE username = ?', (message.from_user.username,))
        existing_user = cursor.fetchone()

        if existing_user is None:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            cursor.execute('''
            INSERT INTO Users (username, subscription_active, subscription_start_datetime, subscription_duration)
            VALUES (?, ?, ?, ?)
            ''', (message.from_user.username, 0, None, ''))

    connection.commit()
    connection.close()

    if is_subscription_active(message.from_user.username):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä")
        item2 = types.KeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
        item3 = types.KeyboardButton("üìÆ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        markup.add(item1, item2, item3)

        bot.send_message(
            message.chat.id,
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –º–µ–Ω—é.",
            parse_mode='html',
            reply_markup=markup
        )

    else:
        subscription_markup = types.InlineKeyboardMarkup(row_width=1)
        buy_subscription = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='buy_subscription')
        subscription_markup.add(buy_subscription)
        bot.send_message(
            message.chat.id,
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
            "üöÄ <b>–ó–∞–ø—É—Å–∫–∞–µ–º—Å—è! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Å–µ–≥–æ –∑–∞ 1 —Ä—É–±–ª—å –¥–æ 15 —Å–µ–Ω—Ç—è–±—Ä—è 2025!</b>\n"
            "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ –õ—é–±–∏—Ç–µ–ª—å—Å–∫–æ–π –§—É—Ç–±–æ–ª—å–Ω–æ–π –õ–∏–≥–∏.\n"
            "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å! ‚öΩ\n",
            parse_mode='html',
            reply_markup=subscription_markup
        )

@bot.message_handler(commands=['admin_feature_view_users_database'])
def view_users(message):
    try:
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT * FROM Users")
        users = cursor.fetchall()

        if not users:
            bot.reply_to(message, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
        response = "<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"
        for user in users:
            username = user[0]
            active = user[1]
            start_date = user[2]
            duration = user[3]
            last_payment_id = user[4]

            response += f"""
        <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}
        <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {active}
        <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {start_date}
        <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration}
        <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π ID –ø–ª–∞—Ç–µ–∂–∞:</b> {last_payment_id}
        {'-'*30}
            """

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç)
        if len(response) > 4096:
            response = response[:4091] + "..."

        bot.send_message(message.chat.id, response, parse_mode='html')

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        if 'connection' in locals():
            connection.close()

@bot.message_handler(commands=['help'])
def help_handler(message):
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä\n- –ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞\n- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–Ω–µ.')

@bot.message_handler(content_types=['text'])
def commands_handler(message):
    if message.chat.type == 'private':
        if is_subscription_active(message.from_user.username):
            if message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä' or message.text == '/schedule':
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫, –∫–∞–∫ –æ–Ω–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ –õ–§–õ (–µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞).')
                user_states[message.chat.id] = 'waiting_for_team'

            elif message.text == 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞' or message.text == '/subscription':
                try:
                    username = message.from_user.username
                    if not username:
                        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username –≤ Telegram.")
                        return

                    connection = sqlite3.connect('users.db')
                    cursor = connection.cursor()

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cursor.execute('''
                    SELECT 
                        username,
                        subscription_active,
                        subscription_start_datetime,
                        subscription_duration
                    FROM Users 
                    WHERE username = ?
                    ''', (username,))

                    user_data = cursor.fetchone()
                    connection.close()

                    if not user_data:
                        bot.reply_to(message, "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        return

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user_data[1] else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
                    start_date = user_data[2] if user_data[2] else "–ù–µ –∑–∞–¥–∞–Ω–∞"
                    duration = user_data[3] if user_data[3] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

                    response = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:</b>\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_data[0]}\n<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {datetime.strptime(start_date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M:%S")}\n<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {datetime.strptime(duration, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M:%S")}"

                    bot.send_message(message.chat.id, response, parse_mode='html')

                except Exception as e:
                    bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

            elif message.text == 'üìÆ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' or message.text == '/feedback':
                bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, –∏–¥–µ—é –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –ú—ã —á–∏—Ç–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
                user_states[message.chat.id] = 'waiting_for_feedback'

            elif user_states.get(message.chat.id) == 'waiting_for_team':
                team = message.text
                bot.send_message(message.chat.id, f'–ù–∞–π–¥–µ–Ω–æ {len(lflparser.get_team_code(team))} –∫–æ–º–∞–Ω–¥. –ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...', parse_mode='html')
                schedules = lflparser.get_schedule(team)[1]
                teams_found = lflparser.get_schedule(team)[0]
                for i in range(len(teams_found)):
                    if schedules[i] == '–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.':
                        bot.send_message(message.chat.id, f'<b>{teams_found[i]}</b>\n\n–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.', parse_mode='html')

                    elif schedules[i] != '–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.' and len(schedules[i]) == 1:
                        bot.send_message(message.chat.id, f'<b>{teams_found[i]}</b>\n\n–î–∞—Ç–∞: {datetime.strptime(schedules[i][0]['match_date_time'], "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y, %H:%M")}\n–°—Ç–∞–¥–∏–æ–Ω: {schedules[i][0]['stadium_name']}\n–ê–¥—Ä–µ—Å: {schedules[i][0]['stadium_address']}\n<b>{schedules[i][0]['home_club_name']} VS {schedules[i][0]['away_club_name']}</b>', parse_mode='html')

                    elif schedules[i] != '–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.' and len(schedules[i]) == 2:
                        bot.send_message(message.chat.id, f'<b>{teams_found[i]}</b>\n\n–î–∞—Ç–∞: {datetime.strptime(schedules[i][0]['match_date_time'], "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y, %H:%M")}\n–°—Ç–∞–¥–∏–æ–Ω: {schedules[i][0]['stadium_name']}\n–ê–¥—Ä–µ—Å: {schedules[i][0]['stadium_address']}\n<b>{schedules[i][0]['home_club_name']} VS {schedules[i][0]['away_club_name']}</b>\n\n–î–∞—Ç–∞: {datetime.strptime(schedules[i][1]['match_date_time'], "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y, %H:%M")}\n–°—Ç–∞–¥–∏–æ–Ω: {schedules[i][1]['stadium_name']}\n–ê–¥—Ä–µ—Å: {schedules[i][1]['stadium_address']}\n<b>{schedules[i][1]['home_club_name']} VS {schedules[i][1]['away_club_name']}</b>', parse_mode='html')

                del user_states[message.chat.id]

            elif user_states.get(message.chat.id) == 'waiting_for_feedback':
                feedback = message.text
                username = message.chat.username

                def transliterate(feedback, username):
                    username_result = username
                    feedback_result = feedback
                    if re.search(r'[^\x00-\x7F]', feedback):
                        feedback_result = unidecode(feedback)
                    if re.search(r'[^\x00-\x7F]', username):
                        username_result = unidecode(username)
                    return username_result, feedback_result

                smtp_obj = smtplib.SMTP('smtp.mail.ru', 587)
                smtp_obj.starttls()
                smtp_obj.login('stas.golovanov.07@mail.ru','M1qvmiFTuBM7n1Yr3dJg')
                smtp_obj.sendmail("stas.golovanov.07@mail.ru","tothefootballers@gmail.com",f"From user:\n{transliterate(feedback, username)[0]}\n\nMessage:\n{transliterate(feedback, username)[1]}")
                smtp_obj.quit()

                bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏ üòä')

                del user_states[message.chat.id]
                del username, feedback

            else:
                if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
                    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!', parse_mode='html')
                elif message.text.lower() == '–ø–æ–∫–∞':
                    bot.send_message(message.chat.id, f'–ü–æ–∫–∞, {message.from_user.first_name}!', parse_mode='html')
                elif message.text.lower() == '–∫–∞–∫ –¥–µ–ª–∞?':
                    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ!', parse_mode='html')
                else:
                    bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏—Ç–µ /help.')

        if not is_subscription_active(message.from_user.username):
            if message.text == 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞' or message.text == '/subscription':
                subscription_markup = types.InlineKeyboardMarkup(row_width=1)
                buy_subscription = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='buy_subscription')
                subscription_markup.add(buy_subscription)
                bot.send_message(message.chat.id, '<b>–£—Å–ø–µ–π—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ–≥–æ –∑–∞ 1 —Ä—É–±–ª—å!</b>\n\n<b>–ß—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ?</b>\n15 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 899 —Ä—É–±. –≤ –≥–æ–¥ –∏ 100 —Ä—É–±. –≤ –º–µ—Å—è—Ü.\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞ 1 —Ä—É–±–ª—å! ‚öΩ', parse_mode='html', reply_markup=subscription_markup)

            elif user_states.get(message.chat.id) == 'waiting_for_email':
                email = message.text
                username = message.from_user.username
                bot.send_message(message.chat.id, '–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑...')
                payment = Payment.create({
                    "amount": {
                        "value": "1.00",
                        "currency": "RUB"
                    },
                    "capture": True,
                    "confirmation": {
                        "type": "redirect",
                        "return_url": "https://t.me/football_amateur_bot"
                    },
                    "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                    "receipt": {
                        "customer": {
                            "email": f"{email}",
                        },
                        "items": [
                            {
                                "description": "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞ 1 —Ä—É–±–ª—å –¥–æ 15 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞",
                                "quantity": 1,
                                "amount": {
                                    "value": "1.00",
                                    "currency": "RUB"
                                },
                                "vat_code": 1
                            }
                        ]
                    }
                }, uuid.uuid4())

                ensure_last_payment_id_column()

                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()

                cursor.execute("""
                    UPDATE Users 
                    SET last_payment_id = ? 
                    WHERE username = ?
                """, (payment.id, username))

                conn.commit()
                conn.close() # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –í –ë–ê–ó–£ –î–ê–ù–ù–´–•

                bot.send_message(message.chat.id, f'–û–ø–ª–∞—Ç–∞: {payment.confirmation.confirmation_url}', parse_mode='html')
                bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 2 –º–∏–Ω—É—Ç. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')

                if wait_for_payment_success(message.from_user.username):
                    try:
                        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        connection = sqlite3.connect('users.db')
                        cursor = connection.cursor()

                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
                        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        cursor.execute('''
                                UPDATE Users 
                                SET 
                                    subscription_active = 1,
                                    subscription_start_datetime = ?,
                                    subscription_duration = ?
                                WHERE username = ?
                            ''', (now, datetime.strptime("15.09.2025 00:00:00", "%d.%m.%Y %H:%M:%S").strftime('%Y-%m-%d %H:%M:%S'), username))

                        connection.commit()
                        connection.close()

                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                        bot.send_message(
                            message.chat.id,
                            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                            f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {datetime.strptime(now, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M:%S")}\n"
                            f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 15 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞ 00:00\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
                            parse_mode='html'
                        )
                    except Exception as e:
                        bot.send_message(
                            message.chat.id,
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"
                        )

                elif Payment.find_one(get_user_column(message.chat.username, 'last_payment_id')).status == "canceled":
                    bot.send_message(message.chat.id, '–û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.')

            else:
                subscription_markup = types.InlineKeyboardMarkup(row_width=1)
                buy_subscription = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='buy_subscription')
                subscription_markup.add(buy_subscription)
                bot.send_message(
                    message.chat.id,
                    f"–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å! ‚öΩ\n",
                    parse_mode='html',
                    reply_markup=subscription_markup
                )

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'buy_subscription':
                bot.send_message(call.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É (–º—ã –µ–µ –Ω–µ —Ö—Ä–∞–Ω–∏–º, –æ–Ω–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞).')
                user_states[call.message.chat.id] = 'waiting_for_email'

    except Exception as e:
        print(repr(e))

bot.polling(non_stop=True)