import telebot
import config
import lflparser
import smtplib
import re
import sqlite3
import uuid
from datetime import datetime
from unidecode import unidecode
from telebot import types
from yookassa import Configuration, Payment

bot = telebot.TeleBot(config.TOKEN)

Configuration.account_id = config.SHOP_ID
Configuration.secret_key = config.YK_API_KEY

user_states = {}
users_waiting_for_payment = {}

def is_subscription_active(username):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ—ë, –µ—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫.

    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Telegram username)
    :return: True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –∏–Ω–∞—á–µ False
    """
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    cursor.execute("SELECT subscription_active, subscription_duration FROM Users WHERE username = ?", (username,))
    result = cursor.fetchone()
    connection.close()

    if result is None:
        return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    active, duration_str = result

    if active != 1:
        return False  # –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

    if not duration_str:
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        cursor.execute("UPDATE Users SET subscription_active = 0 WHERE username = ?", (username,))
        connection.commit()
        connection.close()
        return False  # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞

    try:
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
        duration_dt = datetime.strptime(duration_str, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        return False  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

    current_dt = datetime.now()

    if current_dt >= duration_dt:
        # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        cursor.execute("UPDATE Users SET subscription_active = 0 WHERE username = ?", (username,))
        connection.commit()
        connection.close()
        return False
    else:
        return True  # –ü–æ–¥–ø–∏—Å–∫–∞ –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞

@bot.message_handler(commands=['start'])
def welcome(message):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è subscription_duration
    cursor.execute('''
            UPDATE Users 
            SET subscription_duration = ?
            WHERE username = ?
        ''', ('', 'stanislausvonscheinfein'))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    rows_affected = cursor.rowcount
    connection.commit()
    connection.close()

    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Users (
    username TEXT NOT NULL,
    subscription_active INTEGER,
    subscription_start_datetime TIMESTAMP,
    subscription_duration TEXT NOT NULL
    )
    ''')

    if message.from_user.username:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
        cursor.execute('SELECT * FROM Users WHERE username = ?', (message.from_user.username,))
        existing_user = cursor.fetchone()

        if existing_user is None:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            cursor.execute('''
            INSERT INTO Users (username, subscription_active, subscription_start_datetime, subscription_duration)
            VALUES (?, ?, ?, ?)
            ''', (message.from_user.username, 0, None, ''))

    connection.commit()
    connection.close()

    if is_subscription_active(message.from_user.username):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä")
        item2 = types.KeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
        item3 = types.KeyboardButton("üìÆ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        markup.add(item1, item2, item3)

        bot.send_message(
            message.chat.id,
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –º–µ–Ω—é.",
            parse_mode='html',
            reply_markup=markup
        )

    else:
        subscription_markup = types.InlineKeyboardMarkup(row_width=1)
        buy_subscription = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='buy_subscription')
        subscription_markup.add(buy_subscription)
        bot.send_message(
            message.chat.id,
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
            "üöÄ <b>–ó–∞–ø—É—Å–∫–∞–µ–º—Å—è! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Å–µ–≥–æ –∑–∞ 1 —Ä—É–±–ª—å –¥–æ 15 —Å–µ–Ω—Ç—è–±—Ä—è 2025!</b>\n"
            "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ –õ—é–±–∏—Ç–µ–ª—å—Å–∫–æ–π –§—É—Ç–±–æ–ª—å–Ω–æ–π –õ–∏–≥–∏.\n"
            "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å! ‚öΩ\n",
            parse_mode='html',
            reply_markup=subscription_markup
        )

@bot.message_handler(commands=['admin_feature_view_users_database'])
def view_users(message):
    try:
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT * FROM Users")
        users = cursor.fetchall()

        if not users:
            bot.reply_to(message, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
        response = "<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"
        for user in users:
            username = user[0]
            active = user[1]
            start_date = user[2]
            duration = user[3]

            response += f"""
        <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}
        <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {active}
        <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {start_date}
        <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration}
        {'-'*30}
            """

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç)
        if len(response) > 4096:
            response = response[:4091] + "..."

        bot.send_message(message.chat.id, response, parse_mode='html')

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        if 'connection' in locals():
            connection.close()

@bot.message_handler(commands=['help'])
def help_handler(message):
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä\n- –ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞\n- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–Ω–µ.')

@bot.message_handler(content_types=['text'])
def commands_handler(message):
    if message.chat.type == 'private':
        if is_subscription_active(message.from_user.username):
            if message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä' or message.text == '/schedule':
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫, –∫–∞–∫ –æ–Ω–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ –õ–§–õ (–µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞).')
                user_states[message.chat.id] = 'waiting_for_team'

            elif message.text == 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞' or message.text == '/subscription':
                try:
                    username = message.from_user.username
                    if not username:
                        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username –≤ Telegram.")
                        return

                    connection = sqlite3.connect('users.db')
                    cursor = connection.cursor()

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cursor.execute('''
                    SELECT 
                        username,
                        subscription_active,
                        subscription_start_datetime,
                        subscription_duration
                    FROM Users 
                    WHERE username = ?
                    ''', (username,))

                    user_data = cursor.fetchone()
                    connection.close()

                    if not user_data:
                        bot.reply_to(message, "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        return

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user_data[1] else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
                    start_date = user_data[2] if user_data[2] else "–ù–µ –∑–∞–¥–∞–Ω–∞"
                    duration = user_data[3] if user_data[3] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

                    response = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:</b>\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_data[0]}\n<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {start_date}\n<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {duration}"

                    bot.send_message(message.chat.id, response, parse_mode='html')

                except Exception as e:
                    bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

            elif message.text == 'üìÆ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' or message.text == '/feedback':
                bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, –∏–¥–µ—é –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –ú—ã —á–∏—Ç–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
                user_states[message.chat.id] = 'waiting_for_feedback'

            elif user_states.get(message.chat.id) == 'waiting_for_team':
                team = message.text
                bot.send_message(message.chat.id, f'–ù–∞–π–¥–µ–Ω–æ {len(lflparser.get_team_code(team))} –∫–æ–º–∞–Ω–¥. –ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...', parse_mode='html')
                schedules = lflparser.get_schedule(team)[1]
                teams_found = lflparser.get_schedule(team)[0]
                for i in range(len(teams_found)):
                    if schedules[i] == '–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.':
                        bot.send_message(message.chat.id, f'<b>{teams_found[i]}</b>\n\n–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.', parse_mode='html')

                    elif schedules[i] != '–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.' and len(schedules[i]) == 1:
                        bot.send_message(message.chat.id, f'<b>{teams_found[i]}</b>\n\n–î–∞—Ç–∞: {datetime.strptime(schedules[i][0]['match_date_time'], "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y, %H:%M")}\n–°—Ç–∞–¥–∏–æ–Ω: {schedules[i][0]['stadium_name']}\n–ê–¥—Ä–µ—Å: {schedules[i][0]['stadium_address']}\n<b>{schedules[i][0]['home_club_name']} VS {schedules[i][0]['away_club_name']}</b>', parse_mode='html')

                    elif schedules[i] != '–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.' and len(schedules[i]) == 2:
                        bot.send_message(message.chat.id, f'<b>{teams_found[i]}</b>\n\n–î–∞—Ç–∞: {datetime.strptime(schedules[i][0]['match_date_time'], "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y, %H:%M")}\n–°—Ç–∞–¥–∏–æ–Ω: {schedules[i][0]['stadium_name']}\n–ê–¥—Ä–µ—Å: {schedules[i][0]['stadium_address']}\n<b>{schedules[i][0]['home_club_name']} VS {schedules[i][0]['away_club_name']}</b>\n\n–î–∞—Ç–∞: {datetime.strptime(schedules[i][1]['match_date_time'], "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y, %H:%M")}\n–°—Ç–∞–¥–∏–æ–Ω: {schedules[i][1]['stadium_name']}\n–ê–¥—Ä–µ—Å: {schedules[i][1]['stadium_address']}\n<b>{schedules[i][1]['home_club_name']} VS {schedules[i][1]['away_club_name']}</b>', parse_mode='html')

                del user_states[message.chat.id]

            elif user_states.get(message.chat.id) == 'waiting_for_feedback':
                feedback = message.text
                username = message.from_user.username

                def transliterate(feedback, username):
                    username_result = username
                    feedback_result = feedback
                    if re.search(r'[^\x00-\x7F]', feedback):
                        feedback_result = unidecode(feedback)
                    if re.search(r'[^\x00-\x7F]', username):
                        username_result = unidecode(username)
                    return username_result, feedback_result

                smtp_obj = smtplib.SMTP('smtp.mail.ru', 587)
                smtp_obj.starttls()
                smtp_obj.login('stas.golovanov.07@mail.ru','M1qvmiFTuBM7n1Yr3dJg')
                smtp_obj.sendmail("stas.golovanov.07@mail.ru","tothefootballers@gmail.com",f"From user:\n{transliterate(feedback, username)[0]}\n\nMessage:\n{transliterate(feedback, username)[1]}")
                smtp_obj.quit()

                bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏ üòä')

                del user_states[message.chat.id]
                del username, feedback

            else:
                if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
                    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!', parse_mode='html')
                elif message.text.lower() == '–ø–æ–∫–∞':
                    bot.send_message(message.chat.id, f'–ü–æ–∫–∞, {message.from_user.first_name}!', parse_mode='html')
                elif message.text.lower() == '–∫–∞–∫ –¥–µ–ª–∞?':
                    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ!', parse_mode='html')
                else:
                    bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏—Ç–µ /help.')

        if not is_subscription_active(message.from_user.username):
            if message.text == 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞' or message.text == '/subscription':
                subscription_markup = types.InlineKeyboardMarkup(row_width=1)
                buy_subscription = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='buy_subscription')
                subscription_markup.add(buy_subscription)
                bot.send_message(message.chat.id, '<b>–£—Å–ø–µ–π—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ–≥–æ –∑–∞ 1 —Ä—É–±–ª—å!</b>\n\n<b>–ß—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ?</b>\n15 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 899 —Ä—É–±. –≤ –≥–æ–¥ –∏ 100 —Ä—É–±. –≤ –º–µ—Å—è—Ü.\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞ 1 —Ä—É–±–ª—å! ‚öΩ', parse_mode='html', reply_markup=subscription_markup)
            else:
                subscription_markup = types.InlineKeyboardMarkup(row_width=1)
                buy_subscription = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='buy_subscription')
                subscription_markup.add(buy_subscription)
                bot.send_message(
                    message.chat.id,
                    f"–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å! ‚öΩ\n",
                    parse_mode='html',
                    reply_markup=subscription_markup
                )

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'buy_subscription':
                username = call.message.chat.username
                bot.send_message(call.message.chat.id, '–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑...')
                payment = Payment.create({
                    "amount": {
                        "value": "1.00",
                        "currency": "RUB"
                    },
                    "confirmation": {
                        "type": "redirect",
                        "return_url": "https://t.me/footballhelperbot",
                    },
                    "capture": True,
                    "description": "–î–æ—Å—Ç—É–ø –∑–∞ 1 —Ä—É–±–ª—å –¥–æ 15 —Å–µ–Ω—Ç—è–±—Ä—è 2025",
                }, uuid.uuid4())
                users_waiting_for_payment[call.message.chat.username] = payment.id
                bot.send_message(call.message.chat.id, f'–û–ø–ª–∞—Ç–∞: {payment.confirmation.confirmation_url}', parse_mode='html')
                bot.send_message(call.message.chat.id, '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 2 –º–∏–Ω—É—Ç. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')
                print(users_waiting_for_payment[call.message.chat.username])
                while Payment.find_one(users_waiting_for_payment[call.message.chat.username]).status != 'succeeded':
                    print(Payment.find_one(users_waiting_for_payment[call.message.chat.username]).status)

                if Payment.find_one(users_waiting_for_payment[call.message.chat.username]).status == 'succeeded':
                    users_waiting_for_payment.pop(call.message.chat.username)
                    print(users_waiting_for_payment)
                    try:
                        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        connection = sqlite3.connect('users.db')
                        cursor = connection.cursor()

                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
                        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        cursor.execute('''
                                UPDATE Users 
                                SET 
                                    subscription_active = 1,
                                    subscription_start_datetime = ?,
                                    subscription_duration = ?
                                WHERE username = ?
                            ''', (now, datetime.strptime("15.09.2025 00:00:00", "%d.%m.%Y %H:%M:%S").strftime('%Y-%m-%d %H:%M:%S'), username))

                        connection.commit()
                        connection.close()

                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                        bot.send_message(
                            call.message.chat.id,
                            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                            f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {now}\n"
                            f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 15 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞ 00:00\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
                            parse_mode='html'
                        )
                    except Exception as e:
                        bot.send_message(
                            call.message.chat.id,
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"
                        )

                elif payment.status == "canceled":
                    bot.send_message(call.message.chat.id, '–û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.')

    except Exception as e:
        print(repr(e))

bot.polling(non_stop=True)